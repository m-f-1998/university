/* The following code was generated by JFlex 1.6.1 */

package func.compiler;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/matthew-mac/eclipse-workspace/F29LP-Compiler/funcFLEX.flex</tt>
 */
class funcFLEX {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\10\0\2\61\1\61\1\62\1\61\1\61\22\0\1\61\7\0\1\53"+
    "\1\54\2\0\1\60\3\0\12\1\1\56\1\55\1\0\1\57\3\0"+
    "\1\42\1\47\1\2\1\3\1\6\1\33\1\50\1\35\1\4\2\2"+
    "\1\15\1\30\1\21\1\36\1\23\1\13\1\41\1\16\1\27\1\24"+
    "\1\5\1\45\3\2\6\0\1\44\1\51\1\2\1\7\1\12\1\34"+
    "\1\52\1\37\1\10\2\2\1\17\1\32\1\22\1\40\1\25\1\14"+
    "\1\43\1\20\1\31\1\26\1\11\1\46\3\2\12\0\1\62\u1fa2\0"+
    "\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\31\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\3\1\11\1\3\1\12\35\3\1\13"+
    "\12\3\1\14\1\15\25\3\1\16\1\17\7\3\2\20"+
    "\1\21\1\3\1\22\6\3\1\23\10\3\1\24\6\3"+
    "\1\25\1\26\4\3\1\27\1\30\1\31\1\32\4\3"+
    "\1\33\1\34\5\3\1\35\1\3\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\63\0\63\0\63\0\u0594"+
    "\0\63\0\u05c7\0\u05fa\0\231\0\u062d\0\231\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\63\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\231\0\231"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\231\0\231\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\231\0\u141f\0\231\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e"+
    "\0\u1551\0\231\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u16e9\0\231\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8"+
    "\0\u181b\0\231\0\231\0\u184e\0\u1881\0\u18b4\0\u18e7\0\231"+
    "\0\231\0\231\0\231\0\u191a\0\u194d\0\u1980\0\u19b3\0\231"+
    "\0\231\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\231\0\u1ae5"+
    "\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\4\1\15\1\4\1\16\1\4"+
    "\1\17\1\20\1\21\1\4\1\22\1\4\1\23\1\24"+
    "\1\25\1\26\6\4\1\27\1\4\1\30\1\4\1\31"+
    "\1\32\1\33\1\4\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\1\2\1\41\1\42\65\0\1\3\62\0\52\4"+
    "\11\0\3\4\1\43\46\4\11\0\32\4\1\44\17\4"+
    "\11\0\41\4\1\45\10\4\11\0\12\4\1\46\1\4"+
    "\1\47\3\4\1\50\31\4\11\0\7\4\1\51\42\4"+
    "\11\0\33\4\1\44\16\4\11\0\43\4\1\52\6\4"+
    "\11\0\13\4\1\46\2\4\1\53\2\4\1\54\30\4"+
    "\11\0\5\4\1\55\44\4\11\0\11\4\1\56\40\4"+
    "\11\0\5\4\1\57\44\4\11\0\5\4\1\60\3\4"+
    "\1\61\40\4\11\0\14\4\1\62\35\4\11\0\16\4"+
    "\1\63\33\4\11\0\3\4\1\64\30\4\1\65\15\4"+
    "\11\0\3\4\1\66\1\4\1\67\44\4\11\0\7\4"+
    "\1\70\26\4\1\71\13\4\11\0\7\4\1\72\1\4"+
    "\1\73\40\4\11\0\5\4\1\74\44\4\11\0\11\4"+
    "\1\75\40\4\11\0\34\4\1\76\3\4\1\77\11\4"+
    "\11\0\36\4\1\100\3\4\1\101\7\4\11\0\5\4"+
    "\1\102\44\4\11\0\11\4\1\103\40\4\67\0\1\104"+
    "\64\0\1\42\2\0\4\4\1\105\45\4\11\0\40\4"+
    "\1\106\11\4\11\0\15\4\1\107\34\4\11\0\2\4"+
    "\1\110\47\4\11\0\10\4\1\111\41\4\11\0\42\4"+
    "\1\112\7\4\11\0\17\4\1\113\32\4\11\0\6\4"+
    "\1\114\43\4\11\0\15\4\1\115\34\4\11\0\17\4"+
    "\1\116\32\4\11\0\12\4\1\117\37\4\11\0\13\4"+
    "\1\117\36\4\11\0\13\4\1\120\36\4\11\0\23\4"+
    "\1\121\26\4\11\0\25\4\1\122\24\4\11\0\27\4"+
    "\1\123\22\4\11\0\5\4\1\124\44\4\11\0\20\4"+
    "\1\125\31\4\11\0\26\4\1\126\23\4\11\0\31\4"+
    "\1\127\20\4\11\0\11\4\1\130\40\4\11\0\21\4"+
    "\1\131\30\4\11\0\30\4\1\132\21\4\11\0\26\4"+
    "\1\133\12\4\1\134\10\4\11\0\30\4\1\135\12\4"+
    "\1\136\6\4\11\0\3\4\1\137\46\4\11\0\3\4"+
    "\1\140\46\4\11\0\7\4\1\141\42\4\11\0\7\4"+
    "\1\142\42\4\11\0\47\4\1\143\2\4\11\0\51\4"+
    "\1\144\11\0\3\4\1\145\46\4\11\0\15\4\1\146"+
    "\34\4\11\0\5\4\1\147\44\4\11\0\3\4\1\150"+
    "\23\4\1\151\14\4\1\152\5\4\11\0\7\4\1\153"+
    "\42\4\11\0\17\4\1\146\32\4\11\0\11\4\1\147"+
    "\40\4\11\0\7\4\1\154\21\4\1\155\13\4\1\156"+
    "\4\4\11\0\15\4\1\157\34\4\11\0\17\4\1\160"+
    "\32\4\11\0\15\4\1\161\34\4\11\0\17\4\1\161"+
    "\32\4\11\0\5\4\1\162\44\4\11\0\20\4\1\163"+
    "\31\4\11\0\23\4\1\164\26\4\11\0\34\4\1\165"+
    "\15\4\11\0\11\4\1\166\40\4\11\0\21\4\1\163"+
    "\30\4\11\0\25\4\1\167\24\4\11\0\36\4\1\170"+
    "\13\4\11\0\23\4\1\171\26\4\11\0\2\4\1\172"+
    "\47\4\11\0\25\4\1\173\24\4\11\0\6\4\1\172"+
    "\43\4\11\0\14\4\1\174\35\4\11\0\26\4\1\175"+
    "\23\4\11\0\16\4\1\176\33\4\11\0\30\4\1\177"+
    "\21\4\11\0\3\4\1\200\46\4\11\0\7\4\1\201"+
    "\42\4\11\0\2\4\1\202\47\4\11\0\32\4\1\203"+
    "\17\4\11\0\5\4\1\204\44\4\11\0\34\4\1\205"+
    "\15\4\11\0\6\4\1\206\43\4\11\0\33\4\1\203"+
    "\16\4\11\0\11\4\1\207\40\4\11\0\36\4\1\210"+
    "\13\4\11\0\5\4\1\211\44\4\11\0\5\4\1\61"+
    "\3\4\1\61\40\4\11\0\15\4\1\212\34\4\11\0"+
    "\15\4\1\213\34\4\11\0\35\4\1\214\14\4\11\0"+
    "\17\4\1\212\32\4\11\0\17\4\1\213\32\4\11\0"+
    "\37\4\1\215\12\4\11\0\40\4\1\216\11\4\11\0"+
    "\42\4\1\217\7\4\11\0\5\4\1\220\44\4\11\0"+
    "\5\4\1\221\44\4\11\0\11\4\1\220\40\4\11\0"+
    "\11\4\1\221\40\4\11\0\20\4\1\222\31\4\11\0"+
    "\21\4\1\222\30\4\11\0\5\4\1\223\44\4\11\0"+
    "\26\4\1\224\23\4\11\0\3\4\1\225\46\4\11\0"+
    "\11\4\1\223\40\4\11\0\30\4\1\226\21\4\11\0"+
    "\7\4\1\227\42\4\11\0\12\4\1\120\37\4\11\0"+
    "\2\4\1\230\47\4\11\0\6\4\1\230\43\4\11\0"+
    "\20\4\1\231\31\4\11\0\21\4\1\231\30\4\11\0"+
    "\34\4\1\232\15\4\11\0\14\4\1\233\35\4\11\0"+
    "\36\4\1\234\13\4\11\0\16\4\1\235\33\4\11\0"+
    "\35\4\1\236\14\4\11\0\5\4\1\237\44\4\11\0"+
    "\37\4\1\240\12\4\11\0\11\4\1\237\40\4\11\0"+
    "\2\4\1\241\47\4\11\0\6\4\1\241\43\4\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\3\11\1\1\1\11\42\1\1\11"+
    "\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  @SuppressWarnings("unused")
  private int yyline;

  /** the number of characters up to the start of the matched text */
  @SuppressWarnings("unused")
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  @SuppressWarnings("unused")
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  enum FuncFLEXTokens{
    ASSIGN, BEGIN, COMMA, DIVIDE,
    ELSE, ENDIF, ENDMETHOD, ENDWHILE, EOF, EQ,
    ID, IF, INT, LBRA, LESS, LESSEQ, METHOD, MINUS,
    NEQ, PLUS, RBRA, READ, RETURN, SEMI,
    THEN, TIMES, VARS, WHILE, WRITE
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  funcFLEX(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public FuncFLEXTokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return FuncFLEXTokens.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Unexpected character ["+yytext()+"]");
            }
          case 31: break;
          case 2:
            { return FuncFLEXTokens.INT;
            }
          case 32: break;
          case 3:
            { return FuncFLEXTokens.ID;
            }
          case 33: break;
          case 4:
            { return FuncFLEXTokens.LBRA;
            }
          case 34: break;
          case 5:
            { return FuncFLEXTokens.RBRA;
            }
          case 35: break;
          case 6:
            { return FuncFLEXTokens.SEMI;
            }
          case 36: break;
          case 7:
            { return FuncFLEXTokens.COMMA;
            }
          case 37: break;
          case 8:
            { /* eat whitespace */
            }
          case 38: break;
          case 9:
            { return FuncFLEXTokens.IF;
            }
          case 39: break;
          case 10:
            { return FuncFLEXTokens.EQ;
            }
          case 40: break;
          case 11:
            { return FuncFLEXTokens.ASSIGN;
            }
          case 41: break;
          case 12:
            { return FuncFLEXTokens.NEQ;
            }
          case 42: break;
          case 13:
            { return FuncFLEXTokens.LESSEQ;
            }
          case 43: break;
          case 14:
            { return FuncFLEXTokens.VARS;
            }
          case 44: break;
          case 15:
            { return FuncFLEXTokens.ELSE;
            }
          case 45: break;
          case 16:
            { return FuncFLEXTokens.LESS;
            }
          case 46: break;
          case 17:
            { return FuncFLEXTokens.PLUS;
            }
          case 47: break;
          case 18:
            { return FuncFLEXTokens.THEN;
            }
          case 48: break;
          case 19:
            { return FuncFLEXTokens.READ;
            }
          case 49: break;
          case 20:
            { return FuncFLEXTokens.ENDIF;
            }
          case 50: break;
          case 21:
            { return FuncFLEXTokens.TIMES;
            }
          case 51: break;
          case 22:
            { return FuncFLEXTokens.MINUS;
            }
          case 52: break;
          case 23:
            { return FuncFLEXTokens.WHILE;
            }
          case 53: break;
          case 24:
            { return FuncFLEXTokens.WRITE;
            }
          case 54: break;
          case 25:
            { return FuncFLEXTokens.BEGIN;
            }
          case 55: break;
          case 26:
            { return FuncFLEXTokens.DIVIDE;
            }
          case 56: break;
          case 27:
            { return FuncFLEXTokens.METHOD;
            }
          case 57: break;
          case 28:
            { return FuncFLEXTokens.RETURN;
            }
          case 58: break;
          case 29:
            { return FuncFLEXTokens.ENDWHILE;
            }
          case 59: break;
          case 30:
            { return FuncFLEXTokens.ENDMETHOD;
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
